///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.20.1.931/W32 for MSP430          13/Dec/2016  10:36:41
// Copyright 1996-2014 IAR Systems AB.
// Network license: ISIGRUP (STD)
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430
//    Source file   =  Z:\EV_Charger\Source\EV_Charger\Analog_sampling.c
//    Command line  =  
//        Z:\EV_Charger\Source\EV_Charger\Analog_sampling.c -D
//        CC3000_UNENCRYPTED_SMART_CONFIG -lCN
//        Z:\EV_Charger\EV_Charger\Debug\List\ -lB
//        Z:\EV_Charger\EV_Charger\Debug\List\ -o
//        Z:\EV_Charger\EV_Charger\Debug\Obj\ --debug -D__MSP430AFE253__ -e
//        --double=32 --dlib_config "C:\Archivos de programa\IAR
//        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430fn.h" -I
//        Z:\EV_Charger\EV_Charger\..\Source\CC3000HostDriver\ -I
//        "Z:\EV_Charger\EV_Charger\..\Source\\HyperTerminal Driver\" -I
//        "Z:\EV_Charger\EV_Charger\..\Source\\CC3000 Spi\" -I
//        Z:\EV_Charger\EV_Charger\..\Source\inc\ -Oh --multiplier=16s
//    List file     =  Z:\EV_Charger\EV_Charger\Debug\List\Analog_sampling.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME Analog_sampling

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?SwitchKey16
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK `??SD24AISR::??INTVEC 24`
        PUBWEAK `??SyncAnalogSampling::??INTVEC 10`
        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBWEAK P1OUT
        PUBLIC SD24AISR
        PUBWEAK SD24CCTL2
        PUBWEAK SD24IV
        PUBWEAK SD24MEM0
        PUBWEAK SD24MEM1
        PUBWEAK SD24MEM2
        PUBLIC SyncAnalogSampling
        PUBWEAK TACCR2
        PUBWEAK TACCTL1
        PUBWEAK TAIV

SD24AISR            SYMBOL "SD24AISR"
`??SD24AISR::??INTVEC 24` SYMBOL "??INTVEC 24", SD24AISR
SyncAnalogSampling  SYMBOL "SyncAnalogSampling"
`??SyncAnalogSampling::??INTVEC 10` SYMBOL "??INTVEC 10", SyncAnalogSampling

        EXTERN calculatePower
        EXTERN CheckPilot
        EXTERN Charger_States

// Z:\EV_Charger\Source\EV_Charger\Analog_sampling.c
//    1 #include "ControlPilot.h"
//    2 #include "Main.h"
//    3 #include "Wattmeter.h"
//    4 #include "Charger_States.h"
//    5 #include "Analog_sampling.h"
//    6 #include "ControlPilot.h"
//    7 #include <msp430.h>

        ASEGN DATA16_AN:DATA:NOROOT,021H
// unsigned char volatile P1OUT
P1OUT:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,0106H
// unsigned short volatile SD24CCTL2
SD24CCTL2:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0110H
// unsigned short volatile SD24MEM0
SD24MEM0:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0112H
// unsigned short volatile SD24MEM1
SD24MEM1:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0114H
// unsigned short volatile SD24MEM2
SD24MEM2:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,01aeH
// unsigned short volatile SD24IV
SD24IV:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,012eH
// unsigned short const volatile TAIV
TAIV:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0164H
// unsigned short volatile TACCTL1
TACCTL1:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0176H
// unsigned short volatile TACCR2
TACCR2:
        DS8 2
//    8 
//    9 
//   10 
//   11 #pragma vector=SD24_VECTOR

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   12 __interrupt void SD24AISR(void)
SD24AISR:
//   13 {
        PUSH.W  R13
        PUSH.W  R12
        PUSH.W  R15
        PUSH.W  R14
//   14   
//   15   unsigned short voltage,current;
//   16   unsigned short Pilot;
//   17   
//   18   switch (SD24IV)
        MOV.W   &0x1ae, R15
        SUB.W   #0x6, R15
        JEQ     ??SD24AISR_0
        SUB.W   #0x2, R15
        JEQ     ??SD24AISR_1
        JMP     ??SD24AISR_2
//   19   {
//   20   case 2:                       // SD24MEM Overflow
//   21     break;
//   22   case 4:                       // SD24MEM0 IFG
//   23     break;
//   24   case 6:                       // SD24MEM1 IFG  
//   25    
//   26     voltage = SD24MEM0;         // Save CH0 results (clears IFG)
??SD24AISR_0:
        MOV.W   &0x110, R12
//   27     current = SD24MEM1;         // Save CH1 results (clears IFG)
        MOV.W   &0x112, R13
//   28      if( (P1OUT& BIT0)==BIT0)
        BIT.B   #0x1, &0x21
        JNC     ??SD24AISR_2
//   29     {       
//   30        calculatePower(voltage, current); 
        CALL    #calculatePower
        JMP     ??SD24AISR_2
//   31     }
//   32       
//   33     
//   34     break;
//   35     
//   36   case 8:                       // SD24MEM2 IFG   
//   37     
//   38 
//   39   
//   40     if(TACCR2==240)
??SD24AISR_1:
        CMP.W   #0xf0, &0x176
        JNE     ??SD24AISR_3
//   41     {
//   42         Pilot=SD24MEM2;
        MOV.W   &0x114, R12
//   43        
//   44         
//   45         TACCR2=7760;
        MOV.W   #0x1e50, &0x176
//   46         CheckPilot(Pilot);
        CALL    #CheckPilot
//   47          
//   48         
//   49         Charger_States();
        CALL    #Charger_States
        JMP     ??SD24AISR_2
//   50     }
//   51     else
//   52     {
//   53         Pilot=SD24MEM2;
??SD24AISR_3:
        CMP.W   #0x0, &0x114
//   54         TACCR2=240;
        MOV.W   #0xf0, &0x176
//   55         //Verify Pilot_L
//   56         if(((Pilot<39493)|(Pilot>43500))&(TACCTL1 = OUTMOD_6))   //-13V<Pilot_L<-11V & Pilot ON
        MOV.W   #0xc0, &0x164
//   57             {
//   58               Pilot_State='G';
//   59               Pilot_Num=0;
//   60               return;
//   61             }
//   62        
//   63        
//   64     }
//   65   //P1OUT &= ~BIT6;
//   66     
//   67     break;
//   68   }
//   69 }
??SD24AISR_2:
        POP.W   R14
        POP.W   R15
        POP.W   R12
        POP.W   R13
        RETI
        REQUIRE SD24MEM0
        REQUIRE SD24MEM1
        REQUIRE P1OUT
        REQUIRE TACCR2
        REQUIRE SD24MEM2
        REQUIRE TACCTL1
        REQUIRE SD24IV
//   70 
//   71 #pragma vector=TIMER0_A1_VECTOR

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   72 __interrupt void SyncAnalogSampling (void)
SyncAnalogSampling:
//   73 {  
//   74 
//   75   switch (TAIV)
        CMP.W   #0x4, &0x12e
        JNE     ??SyncAnalogSampling_0
//   76   {
//   77   case 4:                       // TACCR2
//   78      // P1OUT |= BIT6;
//   79      SD24CCTL2 |=SD24SC;    //Triger sampling of Control Pilot
        BIS.W   #0x2, &0x106
//   80     break;
//   81           
//   82   }
//   83 }
??SyncAnalogSampling_0:
        RETI
        REQUIRE SD24CCTL2
        REQUIRE TAIV

        COMMON INTVEC:CONST:ROOT(1)
        ORG 10
`??SyncAnalogSampling::??INTVEC 10`:
        DC16    SyncAnalogSampling

        COMMON INTVEC:CONST:ROOT(1)
        ORG 24
`??SD24AISR::??INTVEC 24`:
        DC16    SD24AISR

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 110 bytes in segment CODE
//  17 bytes in segment DATA16_AN
//   4 bytes in segment INTVEC
// 
// 110 bytes of CODE  memory
//   0 bytes of CONST memory (+  4 bytes shared)
//   0 bytes of DATA  memory (+ 17 bytes shared)
//
//Errors: none
//Warnings: none
