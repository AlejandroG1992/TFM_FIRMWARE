###############################################################################
#
# IAR C/C++ Compiler V6.20.1.931/W32 for MSP430           13/Dec/2016  10:36:41
# Copyright 1996-2014 IAR Systems AB.
# Network license: ISIGRUP (STD)
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  Z:\EV_Charger\Source\EV_Charger\board.c
#    Command line  =  
#        Z:\EV_Charger\Source\EV_Charger\board.c -D
#        CC3000_UNENCRYPTED_SMART_CONFIG -lCN
#        Z:\EV_Charger\EV_Charger\Debug\List\ -lB
#        Z:\EV_Charger\EV_Charger\Debug\List\ -o
#        Z:\EV_Charger\EV_Charger\Debug\Obj\ --debug -D__MSP430AFE253__ -e
#        --double=32 --dlib_config "C:\Archivos de programa\IAR
#        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430fn.h" -I
#        Z:\EV_Charger\EV_Charger\..\Source\CC3000HostDriver\ -I
#        "Z:\EV_Charger\EV_Charger\..\Source\\HyperTerminal Driver\" -I
#        "Z:\EV_Charger\EV_Charger\..\Source\\CC3000 Spi\" -I
#        Z:\EV_Charger\EV_Charger\..\Source\inc\ -Oh --multiplier=16s
#    List file     =  Z:\EV_Charger\EV_Charger\Debug\List\board.lst
#    Object file   =  Z:\EV_Charger\EV_Charger\Debug\Obj\board.r43
#
###############################################################################

Z:\EV_Charger\Source\EV_Charger\board.c
      1          #include <msp430.h>

   \                                 In  segment DATA16_AN, at 0x0
   \   unsigned char volatile IE1
   \                     IE1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2
   \   unsigned char volatile IFG1
   \                     IFG1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x57
   \   unsigned char volatile BCSCTL1
   \                     BCSCTL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x58
   \   unsigned char volatile BCSCTL2
   \                     BCSCTL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x53
   \   unsigned char volatile BCSCTL3
   \                     BCSCTL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x20
   \   unsigned char const volatile P1IN
   \                     P1IN:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x21
   \   unsigned char volatile P1OUT
   \                     P1OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x22
   \   unsigned char volatile P1DIR
   \                     P1DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x24
   \   unsigned char volatile P1IES
   \                     P1IES:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x25
   \   unsigned char volatile P1IE
   \                     P1IE:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x26
   \   unsigned char volatile P1SEL
   \                     P1SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x41
   \   unsigned char volatile P1SEL2
   \                     P1SEL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x29
   \   unsigned char volatile P2OUT
   \                     P2OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2a
   \   unsigned char volatile P2DIR
   \                     P2DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2e
   \   unsigned char volatile P2SEL
   \                     P2SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x42
   \   unsigned char volatile P2SEL2
   \                     P2SEL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x100
   \   unsigned short volatile SD24CTL
   \                     SD24CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x102
   \   unsigned short volatile SD24CCTL0
   \                     SD24CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x104
   \   unsigned short volatile SD24CCTL1
   \                     SD24CCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x106
   \   unsigned short volatile SD24CCTL2
   \                     SD24CCTL2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x160
   \   unsigned short volatile TACTL
   \                     TACTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x164
   \   unsigned short volatile TACCTL1
   \                     TACCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x172
   \   unsigned short volatile TACCR0
   \                     TACCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x176
   \   unsigned short volatile TACCR2
   \                     TACCR2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
      2          #include "wlan.h" 
      3          #include "netapp.h" 
      4          #include "evnt_handler.h"    // callback function declaration
      5          #include "FlashMemory.h"
      6          #include "nvmem.h"
      7          #include "socket.h"
      8          #include "netapp.h"
      9          #include "board.h"
     10          #include "Main.h"
     11          //*****************************************************************************
     12          //
     13          //! pio_init
     14          //!
     15          //! @param  none
     16          //!
     17          //! @return none
     18          //!
     19          //! @brief  Initialize the board's I/O
     20          //
     21          //*****************************************************************************    
     22          
     23          
     24          

   \                                 In  segment CODE, align 2
     25          void pio_init()
   \                     pio_init:
     26          {
     27          	P1SEL =0xE0;    //Configure p1.5, p1.6 and p1.7 for MO, MI and CLK for SPI communications 
   \   000000   F240E0002600 MOV.B   #0xe0, &0x26
     28                  P1SEL2 =0x00;
   \   000006   C2434100     MOV.B   #0x0, &0x41
     29                  
     30                  P1DIR=0x0F;     //Configure P1.0 as SW output, P1.1 as SPI_CS output, p1.2 PWM output, p1.3 RF_PWR_EN output
   \   00000A   F2400F002200 MOV.B   #0xf, &0x22
     31                  P1OUT= 0x00;
   \   000010   C2432100     MOV.B   #0x0, &0x21
     32                  
     33                  P2SEL=0xC0;  //Configure p2.6 & p2.7 for XT2 input
   \   000014   F240C0002E00 MOV.B   #0xc0, &0x2e
     34                  P2SEL2=0x00;
   \   00001A   C2434200     MOV.B   #0x0, &0x42
     35                  
     36                  P2DIR=0x01;   //Configure p2.0 as output for CS
   \   00001E   D2432A00     MOV.B   #0x1, &0x2a
     37                  P2OUT=0x01;
   \   000022   D2432900     MOV.B   #0x1, &0x29
     38                    
     39          	
     40          }
   \   000026   3041         RET
   \   000028                REQUIRE P1SEL
   \   000028                REQUIRE P1SEL2
   \   000028                REQUIRE P1DIR
   \   000028                REQUIRE P1OUT
   \   000028                REQUIRE P2SEL
   \   000028                REQUIRE P2SEL2
   \   000028                REQUIRE P2DIR
   \   000028                REQUIRE P2OUT
     41          //*****************************************************************************
     42          //
     43          //! ReadWlanInterruptPin
     44          //!
     45          //! @param  none
     46          //!
     47          //! @return none
     48          //!
     49          //! @brief  return wlan interrup pin
     50          //
     51          //*****************************************************************************
     52          

   \                                 In  segment CODE, align 2
     53          long ReadWlanInterruptPin(void)
   \                     ReadWlanInterruptPin:
     54          {
     55          	return (P1IN & BIT4);
   \   000000   5C422000     MOV.B   &0x20, R12
   \   000004   3CF01000     AND.W   #0x10, R12
   \   000008   0D43         MOV.W   #0x0, R13
   \   00000A   3041         RET
   \   00000C                REQUIRE P1IN
     56          }
     57          
     58          //*****************************************************************************
     59          //
     60          //! WlanInterruptEnable
     61          //!
     62          //! @param  none
     63          //!
     64          //! @return none
     65          //!
     66          //! @brief  Enable waln IrQ pin
     67          //
     68          //*****************************************************************************
     69          

   \                                 In  segment CODE, align 2
     70          void WlanInterruptEnable()
   \                     WlanInterruptEnable:
     71          {
     72          	__bis_SR_register(GIE);
   \   000000   32D2         BIS.W   #0x8, SR
     73          	P1IES |= BIT4;
   \   000002   F2D010002400 BIS.B   #0x10, &0x24
     74          	P1IE |= BIT4;
   \   000008   F2D010002500 BIS.B   #0x10, &0x25
     75          }
   \   00000E   3041         RET
   \   000010                REQUIRE P1IES
   \   000010                REQUIRE P1IE
     76          
     77          //*****************************************************************************
     78          //
     79          //! WlanInterruptDisable
     80          //!
     81          //! @param  none
     82          //!
     83          //! @return none
     84          //!
     85          //! @brief  Disable wlan IrQ pin
     86          //
     87          //*****************************************************************************
     88          

   \                                 In  segment CODE, align 2
     89          void WlanInterruptDisable()
   \                     WlanInterruptDisable:
     90          {
     91          	P1IE &= ~BIT4;
   \   000000   F2C010002500 BIC.B   #0x10, &0x25
     92          }
   \   000006   3041         RET
   \   000008                REQUIRE P1IE
     93          
     94          //*****************************************************************************
     95          //
     96          //! WriteWlanPin
     97          //!
     98          //! @param  val value to write to wlan pin
     99          //!
    100          //! @return none
    101          //!
    102          //! @brief  write value to wlan pin
    103          //
    104          //*****************************************************************************
    105          

   \                                 In  segment CODE, align 2
    106          void WriteWlanPin( unsigned char val )
   \                     WriteWlanPin:
    107          {
    108          	if (val)
   \   000000   4C93         CMP.B   #0x0, R12
   \   000002   0324         JEQ     ??WriteWlanPin_0
    109          	{
    110          		P1OUT |= BIT3;	
   \   000004   F2D22100     BIS.B   #0x8, &0x21
   \   000008   3041         RET
    111          	}
    112          	else
    113          	{
    114          		P1OUT &= ~BIT3;
   \                     ??WriteWlanPin_0:
   \   00000A   F2C22100     BIC.B   #0x8, &0x21
    115          	}
    116          }
   \   00000E   3041         RET
   \   000010                REQUIRE P1OUT
    117          
    118          //*****************************************************************************
    119          //
    120          //! initClk
    121          //!
    122          //!  @param  None
    123          //!
    124          //!  @return none
    125          //!
    126          //!  @brief  Init the device with 16 MHz DCOCLCK.
    127          //
    128          //*****************************************************************************

   \                                 In  segment CODE, align 2
    129          void initClk(void)
   \                     initClk:
    130          {
    131          	//XT2=8 MHz for SMCLK & LP for ACLK
    132                  BCSCTL1 = XTS;
   \   000000   F24040005700 MOV.B   #0x40, &0x57
    133          	BCSCTL2 |= SELM1 + SELS ;	                //Set SMCLK as XT2CLK when XT2 oscillator present on-chip	
   \   000006   F2D088005800 BIS.B   #0x88, &0x58
    134          	BCSCTL3 |= XT2S1;	                        //3- to 16-MHz crystal or resonator
   \   00000C   F2D080005300 BIS.B   #0x80, &0x53
    135                  
    136                   //LP=12 kHz
    137                  BCSCTL1 = DIVA1+DIVA0;
   \   000012   F24030005700 MOV.B   #0x30, &0x57
    138                  BCSCTL3 |= LFXT1S1;
   \   000018   F2D020005300 BIS.B   #0x20, &0x53
    139                        
    140                  do
    141                  {
    142                    IFG1 &= ~OFIFG;
   \                     ??initClk_0:
   \   00001E   E2C30200     BIC.B   #0x2, &0x2
    143                  } while((IFG1 & OFIFG));
   \   000022   E2B30200     BIT.B   #0x2, &0x2
   \   000026   FB2F         JC      ??initClk_0
    144                  
    145                 
    146                  
    147          }
   \   000028   3041         RET
   \   00002A                REQUIRE BCSCTL1
   \   00002A                REQUIRE BCSCTL2
   \   00002A                REQUIRE BCSCTL3
   \   00002A                REQUIRE IFG1
    148          

   \                                 In  segment CODE, align 2
    149          void startCharge()
   \                     startCharge:
    150          {
    151              P1DIR |= BIT0;
   \   000000   D2D32200     BIS.B   #0x1, &0x22
    152              P1OUT |= BIT0;
   \   000004   D2D32100     BIS.B   #0x1, &0x21
    153              //SD24CCTL1 |= SD24IE;
    154              SD24CCTL1 &= ~SD24SNGL;
   \   000008   B2C000040401 BIC.W   #0x400, &0x104
    155              SD24CCTL1 |=SD24SC;    //Triger sampling
   \   00000E   A2D30401     BIS.W   #0x2, &0x104
    156          }
   \   000012   3041         RET
   \   000014                REQUIRE P1DIR
   \   000014                REQUIRE P1OUT
   \   000014                REQUIRE SD24CCTL1
    157          

   \                                 In  segment CODE, align 2
    158          void stopCharge()
   \                     stopCharge:
    159          {
    160              P1OUT &= ~BIT0;
   \   000000   D2C32100     BIC.B   #0x1, &0x21
    161              //SD24CCTL1 &= ~SD24IE;
    162              SD24CCTL1 |= SD24SNGL;
   \   000004   B2D000040401 BIS.W   #0x400, &0x104
    163              
    164              
    165          }
   \   00000A   3041         RET
   \   00000C                REQUIRE P1OUT
   \   00000C                REQUIRE SD24CCTL1
    166          
    167          
    168          //***********************PILOT AND POWER MEAS**********************************
    169          

   \                                 In  segment CODE, align 2
    170          void configureTimerPWM()
   \                     configureTimerPWM:
    171          {   
    172                
    173                P1DIR |= BIT1;     
   \   000000   E2D32200     BIS.B   #0x2, &0x22
    174               // P1SEL &= ~(BIT1);
    175               // P1SEL2 &= ~(BIT1);
    176                
    177                
    178                TA0CCR0 = 8000;                           // 1KHz signal           
   \   000004   B240401F7201 MOV.W   #0x1f40, &0x172
    179                TACCTL1 = OUTMOD_0;
   \   00000A   82436401     MOV.W   #0x0, &0x164
    180                P1OUT |= BIT1;
   \   00000E   E2D32100     BIS.B   #0x2, &0x21
    181                TACTL = MC_1 + TASSEL_2;   
   \   000012   B24010026001 MOV.W   #0x210, &0x160
    182                //Configure to synchronize with sampling Pilot
    183                
    184                TACCR2=50;
   \   000018   B24032007601 MOV.W   #0x32, &0x176
    185          }
   \   00001E   3041         RET
   \   000020                REQUIRE P1DIR
   \   000020                REQUIRE TACCR0
   \   000020                REQUIRE TACCTL1
   \   000020                REQUIRE P1OUT
   \   000020                REQUIRE TACTL
   \   000020                REQUIRE TACCR2
    186           

   \                                 In  segment CODE, align 2
    187          void initADC()
   \                     initADC:
    188          {    //Use SMCLK , Ref 1.2V , 2 complement
   \   000000   2183         SUB.W   #0x2, SP
    189                volatile unsigned int i;
    190                SD24CTL = SD24REFON+SD24SSEL_1+SD24DIV_1;  //fM<3.3 MHz, SMCLK /2
   \   000002   B24054000001 MOV.W   #0x54, &0x100
    191                
    192                //Channel0=voltage and Channel1=current
    193                SD24CCTL0 = SD24DF+SD24GRP;  //2s complement, Grouped
   \   000008   B24011000201 MOV.W   #0x11, &0x102
    194                SD24CCTL1 = SD24DF+SD24IE+SD24XOSR;  // 512 Oversampling-> 2*512/8E6=128 us sampling period
   \   00000E   B24018080401 MOV.W   #0x818, &0x104
    195                      
    196                //Channel2=Control Pilot  and synchonized with Control Pilot (TACCR2)
    197                SD24CCTL2 = SD24SNGL+SD24DF+SD24OSR1+SD24OSR0; // 
   \   000014   B24010070601 MOV.W   #0x710, &0x106
    198              
    199                for (i = 0; i < 0x3600; i++);             // Delay for 1.2V ref startup
   \   00001A   81430000     MOV.W   #0x0, 0(SP)
   \   00001E   043C         JMP     ??initADC_1
   \                     ??initADC_0:
   \   000020   2F41         MOV.W   @SP, R15
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   814F0000     MOV.W   R15, 0(SP)
   \                     ??initADC_1:
   \   000028   B19000360000 CMP.W   #0x3600, 0(SP)
   \   00002E   F82B         JNC     ??initADC_0
    200                
    201                SD24CCTL1 |=SD24SC;    //Triger sampling 
   \   000030   A2D30401     BIS.W   #0x2, &0x104
    202          }
   \   000034   2153         ADD.W   #0x2, SP
   \   000036   3041         RET
   \   000038                REQUIRE SD24CTL
   \   000038                REQUIRE SD24CCTL0
   \   000038                REQUIRE SD24CCTL1
   \   000038                REQUIRE SD24CCTL2
    203          

   \                                 In  segment CODE, align 2
    204          void configureWatchdog()
   \                     configureWatchdog:
    205          {
    206              WDTCTL = WDTPW + WDTTMSEL+WDTSSEL;
   \   000000   B240145A2001 MOV.W   #0x5a14, &0x120
    207             
    208              IE1 |= WDTIE;
   \   000006   D2D30000     BIS.B   #0x1, &0x0
    209              __bis_SR_register(GIE);
   \   00000A   32D2         BIS.W   #0x8, SR
    210          
    211          }
   \   00000C   3041         RET
   \   00000E                REQUIRE WDTCTL
   \   00000E                REQUIRE IE1
    212          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    213          char WDT_counter;
   \                     WDT_counter:
   \   000000                DS8 1
    214          
    215          #pragma vector=WDT_VECTOR

   \                                 In  segment CODE, align 2
    216          __interrupt void WatchDogTimer (void)
   \                     WatchDogTimer:
    217          {  
   \   000000   0D12         PUSH.W  R13
   \   000002   0C12         PUSH.W  R12
   \   000004   0F12         PUSH.W  R15
   \   000006   0E12         PUSH.W  R14
    218            
    219              if(WDT_counter==3)
   \   000008   F2900300.... CMP.B   #0x3, &WDT_counter
   \   00000E   0220         JNE     ??WatchDogTimer_0
    220              {
    221                    //Try to reconnect
    222                    set_Registers(read_Identifier());        
   \   000010   B012....     CALL    #?Subroutine0
    223                    WDTCTL = WDTHOLD;	       // Reset if not connected
    224                   
    225              }
    226            
    227              if(WDT_counter>6)
   \                     ??WatchDogTimer_0:
   \   000014   F2900700.... CMP.B   #0x7, &WDT_counter
   \   00001A   0228         JNC     ??WatchDogTimer_1
    228              {
    229                    //System reset
    230                    set_Registers(read_Identifier());        
   \   00001C   B012....     CALL    #?Subroutine0
    231                    WDTCTL = WDTHOLD;	       // Reset if not connected
    232                   
    233              }
    234              
    235              WDT_counter++;
   \                     ??WatchDogTimer_1:
   \   000020   D253....     ADD.B   #0x1, &WDT_counter
    236            
    237          }
   \   000024   3E41         POP.W   R14
   \   000026   3F41         POP.W   R15
   \   000028   3C41         POP.W   R12
   \   00002A   3D41         POP.W   R13
   \   00002C   0013         RETI
   \   00002E                REQUIRE WDTCTL

   \                                 In  segment CODE, align 2
   \                     ?Subroutine0:
   \   000000   B012....     CALL    #read_Identifier
   \   000004   B012....     CALL    #set_Registers
   \   000008   B24080002001 MOV.W   #0x80, &0x120
   \   00000E   3041         RET
    238          
    239          
    240          
    241          // restart of the MSP430.  

   \                                 In  segment CODE, align 2
    242          void resetWDT()
   \                     resetWDT:
    243          {	    
    244                  //WDT_counter=0;     
    245          	WDTCTL = WDTPW + WDTTMSEL+WDTCNTCL;
   \   000000   B240185A2001 MOV.W   #0x5a18, &0x120
    246          }
   \   000006   3041         RET
   \   000008                REQUIRE WDTCTL
    247          
    248          // Timeout configuration  
    249          

   \                                 In  segment CODE, align 2
    250          void Timeout()
   \                     Timeout:
    251          {
   \   000000   31801000     SUB.W   #0x10, SP
    252                unsigned long aucDHCP       = 14400;
   \   000004   B14040380C00 MOV.W   #0x3840, 0xc(SP)
   \   00000A   81430E00     MOV.W   #0x0, 0xe(SP)
    253                  unsigned long aucARP        = 14400;
   \   00000E   B14040380800 MOV.W   #0x3840, 0x8(SP)
   \   000014   81430A00     MOV.W   #0x0, 0xa(SP)
    254                  unsigned long aucKeepalive  = 14400;
   \   000018   B14040380400 MOV.W   #0x3840, 0x4(SP)
   \   00001E   81430600     MOV.W   #0x0, 0x6(SP)
    255                  unsigned long aucInactivity = 5;
   \   000022   B14005000000 MOV.W   #0x5, 0(SP)
   \   000028   81430200     MOV.W   #0x0, 0x2(SP)
    256          
    257                  netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity);
   \   00002C   0F41         MOV.W   SP, R15
   \   00002E   0E41         MOV.W   SP, R14
   \   000030   2E52         ADD.W   #0x4, R14
   \   000032   0D41         MOV.W   SP, R13
   \   000034   3D52         ADD.W   #0x8, R13
   \   000036   0C41         MOV.W   SP, R12
   \   000038   3C500C00     ADD.W   #0xc, R12
   \   00003C   B012....     CALL    #netapp_timeout_values
    258          }
   \   000040   31501000     ADD.W   #0x10, SP
   \   000044   3041         RET

   \                                 In  segment INTVEC, offset 0x14, root
   \                     `??WatchDogTimer::??INTVEC 20`:
   \   000014   ....         DC16    WatchDogTimer
    259          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   ReadWlanInterruptPin
     18   Timeout
       18   -> netapp_timeout_values
     12   WatchDogTimer
       12   -> read_Identifier
       12   -> set_Registers
      2   WlanInterruptDisable
      2   WlanInterruptEnable
      2   WriteWlanPin
      2   configureTimerPWM
      2   configureWatchdog
      4   initADC
      2   initClk
      2   pio_init
      2   resetWDT
      2   startCharge
      2   stopCharge


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?Subroutine0
       1  BCSCTL1
       1  BCSCTL2
       1  BCSCTL3
       1  IE1
       1  IFG1
       1  P1DIR
       1  P1IE
       1  P1IES
       1  P1IN
       1  P1OUT
       1  P1SEL
       1  P1SEL2
       1  P2DIR
       1  P2OUT
       1  P2SEL
       1  P2SEL2
      12  ReadWlanInterruptPin
       2  SD24CCTL0
       2  SD24CCTL1
       2  SD24CCTL2
       2  SD24CTL
       2  TACCR0
       2  TACCR2
       2  TACCTL1
       2  TACTL
      70  Timeout
       2  WDTCTL
       1  WDT_counter
      46  WatchDogTimer
       2  WatchDogTimer::??INTVEC 20
       8  WlanInterruptDisable
      16  WlanInterruptEnable
      16  WriteWlanPin
      32  configureTimerPWM
      14  configureWatchdog
      56  initADC
      42  initClk
      40  pio_init
       8  resetWDT
      20  startCharge
      12  stopCharge

 
 408 bytes in segment CODE
  34 bytes in segment DATA16_AN
   1 byte  in segment DATA16_Z
   2 bytes in segment INTVEC
 
 408 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
   1 byte  of DATA  memory (+ 34 bytes shared)

Errors: none
Warnings: none
