///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.20.1.931/W32 for MSP430          13/Dec/2016  10:36:41
// Copyright 1996-2014 IAR Systems AB.
// Network license: ISIGRUP (STD)
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430
//    Source file   =  Z:\EV_Charger\Source\EV_Charger\board.c
//    Command line  =  
//        Z:\EV_Charger\Source\EV_Charger\board.c -D
//        CC3000_UNENCRYPTED_SMART_CONFIG -lCN
//        Z:\EV_Charger\EV_Charger\Debug\List\ -lB
//        Z:\EV_Charger\EV_Charger\Debug\List\ -o
//        Z:\EV_Charger\EV_Charger\Debug\Obj\ --debug -D__MSP430AFE253__ -e
//        --double=32 --dlib_config "C:\Archivos de programa\IAR
//        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430fn.h" -I
//        Z:\EV_Charger\EV_Charger\..\Source\CC3000HostDriver\ -I
//        "Z:\EV_Charger\EV_Charger\..\Source\\HyperTerminal Driver\" -I
//        "Z:\EV_Charger\EV_Charger\..\Source\\CC3000 Spi\" -I
//        Z:\EV_Charger\EV_Charger\..\Source\inc\ -Oh --multiplier=16s
//    List file     =  Z:\EV_Charger\EV_Charger\Debug\List\board.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME board

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_zero
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK `??WatchDogTimer::??INTVEC 20`
        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBWEAK BCSCTL1
        PUBWEAK BCSCTL2
        PUBWEAK BCSCTL3
        PUBWEAK IE1
        PUBWEAK IFG1
        PUBWEAK P1DIR
        PUBWEAK P1IE
        PUBWEAK P1IES
        PUBWEAK P1IN
        PUBWEAK P1OUT
        PUBWEAK P1SEL
        PUBWEAK P1SEL2
        PUBWEAK P2DIR
        PUBWEAK P2OUT
        PUBWEAK P2SEL
        PUBWEAK P2SEL2
        PUBLIC ReadWlanInterruptPin
        PUBWEAK SD24CCTL0
        PUBWEAK SD24CCTL1
        PUBWEAK SD24CCTL2
        PUBWEAK SD24CTL
        PUBWEAK TACCR0
        PUBWEAK TACCR2
        PUBWEAK TACCTL1
        PUBWEAK TACTL
        PUBLIC Timeout
        PUBWEAK WDTCTL
        PUBLIC WDT_counter
        PUBLIC WatchDogTimer
        PUBLIC WlanInterruptDisable
        PUBLIC WlanInterruptEnable
        PUBLIC WriteWlanPin
        PUBLIC configureTimerPWM
        PUBLIC configureWatchdog
        PUBLIC initADC
        PUBLIC initClk
        PUBLIC pio_init
        PUBLIC resetWDT
        PUBLIC startCharge
        PUBLIC stopCharge

WatchDogTimer       SYMBOL "WatchDogTimer"
`??WatchDogTimer::??INTVEC 20` SYMBOL "??INTVEC 20", WatchDogTimer

        EXTERN netapp_timeout_values
        EXTERN read_Identifier
        EXTERN set_Registers

// Z:\EV_Charger\Source\EV_Charger\board.c
//    1 #include <msp430.h>

        ASEGN DATA16_AN:DATA:NOROOT,00H
// unsigned char volatile IE1
IE1:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,02H
// unsigned char volatile IFG1
IFG1:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,057H
// unsigned char volatile BCSCTL1
BCSCTL1:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,058H
// unsigned char volatile BCSCTL2
BCSCTL2:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,053H
// unsigned char volatile BCSCTL3
BCSCTL3:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,020H
// unsigned char const volatile P1IN
P1IN:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,021H
// unsigned char volatile P1OUT
P1OUT:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,022H
// unsigned char volatile P1DIR
P1DIR:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,024H
// unsigned char volatile P1IES
P1IES:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,025H
// unsigned char volatile P1IE
P1IE:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,026H
// unsigned char volatile P1SEL
P1SEL:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,041H
// unsigned char volatile P1SEL2
P1SEL2:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,029H
// unsigned char volatile P2OUT
P2OUT:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,02aH
// unsigned char volatile P2DIR
P2DIR:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,02eH
// unsigned char volatile P2SEL
P2SEL:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,042H
// unsigned char volatile P2SEL2
P2SEL2:
        DS8 1

        ASEGN DATA16_AN:DATA:NOROOT,0100H
// unsigned short volatile SD24CTL
SD24CTL:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0102H
// unsigned short volatile SD24CCTL0
SD24CCTL0:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0104H
// unsigned short volatile SD24CCTL1
SD24CCTL1:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0106H
// unsigned short volatile SD24CCTL2
SD24CCTL2:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0160H
// unsigned short volatile TACTL
TACTL:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0164H
// unsigned short volatile TACCTL1
TACCTL1:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0172H
// unsigned short volatile TACCR0
TACCR0:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0176H
// unsigned short volatile TACCR2
TACCR2:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0120H
// unsigned short volatile WDTCTL
WDTCTL:
        DS8 2
//    2 #include "wlan.h" 
//    3 #include "netapp.h" 
//    4 #include "evnt_handler.h"    // callback function declaration
//    5 #include "FlashMemory.h"
//    6 #include "nvmem.h"
//    7 #include "socket.h"
//    8 #include "netapp.h"
//    9 #include "board.h"
//   10 #include "Main.h"
//   11 //*****************************************************************************
//   12 //
//   13 //! pio_init
//   14 //!
//   15 //! @param  none
//   16 //!
//   17 //! @return none
//   18 //!
//   19 //! @brief  Initialize the board's I/O
//   20 //
//   21 //*****************************************************************************    
//   22 
//   23 
//   24 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   25 void pio_init()
pio_init:
//   26 {
//   27 	P1SEL =0xE0;    //Configure p1.5, p1.6 and p1.7 for MO, MI and CLK for SPI communications 
        MOV.B   #0xe0, &0x26
//   28         P1SEL2 =0x00;
        MOV.B   #0x0, &0x41
//   29         
//   30         P1DIR=0x0F;     //Configure P1.0 as SW output, P1.1 as SPI_CS output, p1.2 PWM output, p1.3 RF_PWR_EN output
        MOV.B   #0xf, &0x22
//   31         P1OUT= 0x00;
        MOV.B   #0x0, &0x21
//   32         
//   33         P2SEL=0xC0;  //Configure p2.6 & p2.7 for XT2 input
        MOV.B   #0xc0, &0x2e
//   34         P2SEL2=0x00;
        MOV.B   #0x0, &0x42
//   35         
//   36         P2DIR=0x01;   //Configure p2.0 as output for CS
        MOV.B   #0x1, &0x2a
//   37         P2OUT=0x01;
        MOV.B   #0x1, &0x29
//   38           
//   39 	
//   40 }
        RET
        REQUIRE P1SEL
        REQUIRE P1SEL2
        REQUIRE P1DIR
        REQUIRE P1OUT
        REQUIRE P2SEL
        REQUIRE P2SEL2
        REQUIRE P2DIR
        REQUIRE P2OUT
//   41 //*****************************************************************************
//   42 //
//   43 //! ReadWlanInterruptPin
//   44 //!
//   45 //! @param  none
//   46 //!
//   47 //! @return none
//   48 //!
//   49 //! @brief  return wlan interrup pin
//   50 //
//   51 //*****************************************************************************
//   52 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   53 long ReadWlanInterruptPin(void)
ReadWlanInterruptPin:
//   54 {
//   55 	return (P1IN & BIT4);
        MOV.B   &0x20, R12
        AND.W   #0x10, R12
        MOV.W   #0x0, R13
        RET
        REQUIRE P1IN
//   56 }
//   57 
//   58 //*****************************************************************************
//   59 //
//   60 //! WlanInterruptEnable
//   61 //!
//   62 //! @param  none
//   63 //!
//   64 //! @return none
//   65 //!
//   66 //! @brief  Enable waln IrQ pin
//   67 //
//   68 //*****************************************************************************
//   69 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   70 void WlanInterruptEnable()
WlanInterruptEnable:
//   71 {
//   72 	__bis_SR_register(GIE);
        BIS.W   #0x8, SR
//   73 	P1IES |= BIT4;
        BIS.B   #0x10, &0x24
//   74 	P1IE |= BIT4;
        BIS.B   #0x10, &0x25
//   75 }
        RET
        REQUIRE P1IES
        REQUIRE P1IE
//   76 
//   77 //*****************************************************************************
//   78 //
//   79 //! WlanInterruptDisable
//   80 //!
//   81 //! @param  none
//   82 //!
//   83 //! @return none
//   84 //!
//   85 //! @brief  Disable wlan IrQ pin
//   86 //
//   87 //*****************************************************************************
//   88 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   89 void WlanInterruptDisable()
WlanInterruptDisable:
//   90 {
//   91 	P1IE &= ~BIT4;
        BIC.B   #0x10, &0x25
//   92 }
        RET
        REQUIRE P1IE
//   93 
//   94 //*****************************************************************************
//   95 //
//   96 //! WriteWlanPin
//   97 //!
//   98 //! @param  val value to write to wlan pin
//   99 //!
//  100 //! @return none
//  101 //!
//  102 //! @brief  write value to wlan pin
//  103 //
//  104 //*****************************************************************************
//  105 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  106 void WriteWlanPin( unsigned char val )
WriteWlanPin:
//  107 {
//  108 	if (val)
        CMP.B   #0x0, R12
        JEQ     ??WriteWlanPin_0
//  109 	{
//  110 		P1OUT |= BIT3;	
        BIS.B   #0x8, &0x21
        RET
//  111 	}
//  112 	else
//  113 	{
//  114 		P1OUT &= ~BIT3;
??WriteWlanPin_0:
        BIC.B   #0x8, &0x21
//  115 	}
//  116 }
        RET
        REQUIRE P1OUT
//  117 
//  118 //*****************************************************************************
//  119 //
//  120 //! initClk
//  121 //!
//  122 //!  @param  None
//  123 //!
//  124 //!  @return none
//  125 //!
//  126 //!  @brief  Init the device with 16 MHz DCOCLCK.
//  127 //
//  128 //*****************************************************************************

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  129 void initClk(void)
initClk:
//  130 {
//  131 	//XT2=8 MHz for SMCLK & LP for ACLK
//  132         BCSCTL1 = XTS;
        MOV.B   #0x40, &0x57
//  133 	BCSCTL2 |= SELM1 + SELS ;	                //Set SMCLK as XT2CLK when XT2 oscillator present on-chip	
        BIS.B   #0x88, &0x58
//  134 	BCSCTL3 |= XT2S1;	                        //3- to 16-MHz crystal or resonator
        BIS.B   #0x80, &0x53
//  135         
//  136          //LP=12 kHz
//  137         BCSCTL1 = DIVA1+DIVA0;
        MOV.B   #0x30, &0x57
//  138         BCSCTL3 |= LFXT1S1;
        BIS.B   #0x20, &0x53
//  139               
//  140         do
//  141         {
//  142           IFG1 &= ~OFIFG;
??initClk_0:
        BIC.B   #0x2, &0x2
//  143         } while((IFG1 & OFIFG));
        BIT.B   #0x2, &0x2
        JC      ??initClk_0
//  144         
//  145        
//  146         
//  147 }
        RET
        REQUIRE BCSCTL1
        REQUIRE BCSCTL2
        REQUIRE BCSCTL3
        REQUIRE IFG1
//  148 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  149 void startCharge()
startCharge:
//  150 {
//  151     P1DIR |= BIT0;
        BIS.B   #0x1, &0x22
//  152     P1OUT |= BIT0;
        BIS.B   #0x1, &0x21
//  153     //SD24CCTL1 |= SD24IE;
//  154     SD24CCTL1 &= ~SD24SNGL;
        BIC.W   #0x400, &0x104
//  155     SD24CCTL1 |=SD24SC;    //Triger sampling
        BIS.W   #0x2, &0x104
//  156 }
        RET
        REQUIRE P1DIR
        REQUIRE P1OUT
        REQUIRE SD24CCTL1
//  157 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  158 void stopCharge()
stopCharge:
//  159 {
//  160     P1OUT &= ~BIT0;
        BIC.B   #0x1, &0x21
//  161     //SD24CCTL1 &= ~SD24IE;
//  162     SD24CCTL1 |= SD24SNGL;
        BIS.W   #0x400, &0x104
//  163     
//  164     
//  165 }
        RET
        REQUIRE P1OUT
        REQUIRE SD24CCTL1
//  166 
//  167 
//  168 //***********************PILOT AND POWER MEAS**********************************
//  169 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  170 void configureTimerPWM()
configureTimerPWM:
//  171 {   
//  172       
//  173       P1DIR |= BIT1;     
        BIS.B   #0x2, &0x22
//  174      // P1SEL &= ~(BIT1);
//  175      // P1SEL2 &= ~(BIT1);
//  176       
//  177       
//  178       TA0CCR0 = 8000;                           // 1KHz signal           
        MOV.W   #0x1f40, &0x172
//  179       TACCTL1 = OUTMOD_0;
        MOV.W   #0x0, &0x164
//  180       P1OUT |= BIT1;
        BIS.B   #0x2, &0x21
//  181       TACTL = MC_1 + TASSEL_2;   
        MOV.W   #0x210, &0x160
//  182       //Configure to synchronize with sampling Pilot
//  183       
//  184       TACCR2=50;
        MOV.W   #0x32, &0x176
//  185 }
        RET
        REQUIRE P1DIR
        REQUIRE TACCR0
        REQUIRE TACCTL1
        REQUIRE P1OUT
        REQUIRE TACTL
        REQUIRE TACCR2
//  186  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  187 void initADC()
initADC:
//  188 {    //Use SMCLK , Ref 1.2V , 2 complement
        SUB.W   #0x2, SP
//  189       volatile unsigned int i;
//  190       SD24CTL = SD24REFON+SD24SSEL_1+SD24DIV_1;  //fM<3.3 MHz, SMCLK /2
        MOV.W   #0x54, &0x100
//  191       
//  192       //Channel0=voltage and Channel1=current
//  193       SD24CCTL0 = SD24DF+SD24GRP;  //2s complement, Grouped
        MOV.W   #0x11, &0x102
//  194       SD24CCTL1 = SD24DF+SD24IE+SD24XOSR;  // 512 Oversampling-> 2*512/8E6=128 us sampling period
        MOV.W   #0x818, &0x104
//  195             
//  196       //Channel2=Control Pilot  and synchonized with Control Pilot (TACCR2)
//  197       SD24CCTL2 = SD24SNGL+SD24DF+SD24OSR1+SD24OSR0; // 
        MOV.W   #0x710, &0x106
//  198     
//  199       for (i = 0; i < 0x3600; i++);             // Delay for 1.2V ref startup
        MOV.W   #0x0, 0(SP)
        JMP     ??initADC_1
??initADC_0:
        MOV.W   @SP, R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0(SP)
??initADC_1:
        CMP.W   #0x3600, 0(SP)
        JNC     ??initADC_0
//  200       
//  201       SD24CCTL1 |=SD24SC;    //Triger sampling 
        BIS.W   #0x2, &0x104
//  202 }
        ADD.W   #0x2, SP
        RET
        REQUIRE SD24CTL
        REQUIRE SD24CCTL0
        REQUIRE SD24CCTL1
        REQUIRE SD24CCTL2
//  203 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  204 void configureWatchdog()
configureWatchdog:
//  205 {
//  206     WDTCTL = WDTPW + WDTTMSEL+WDTSSEL;
        MOV.W   #0x5a14, &0x120
//  207    
//  208     IE1 |= WDTIE;
        BIS.B   #0x1, &0x0
//  209     __bis_SR_register(GIE);
        BIS.W   #0x8, SR
//  210 
//  211 }
        RET
        REQUIRE WDTCTL
        REQUIRE IE1
//  212 

        RSEG DATA16_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  213 char WDT_counter;
WDT_counter:
        DS8 1
//  214 
//  215 #pragma vector=WDT_VECTOR

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  216 __interrupt void WatchDogTimer (void)
WatchDogTimer:
//  217 {  
        PUSH.W  R13
        PUSH.W  R12
        PUSH.W  R15
        PUSH.W  R14
//  218   
//  219     if(WDT_counter==3)
        CMP.B   #0x3, &WDT_counter
        JNE     ??WatchDogTimer_0
//  220     {
//  221           //Try to reconnect
//  222           set_Registers(read_Identifier());        
        CALL    #?Subroutine0
//  223           WDTCTL = WDTHOLD;	       // Reset if not connected
//  224          
//  225     }
//  226   
//  227     if(WDT_counter>6)
??WatchDogTimer_0:
        CMP.B   #0x7, &WDT_counter
        JNC     ??WatchDogTimer_1
//  228     {
//  229           //System reset
//  230           set_Registers(read_Identifier());        
        CALL    #?Subroutine0
//  231           WDTCTL = WDTHOLD;	       // Reset if not connected
//  232          
//  233     }
//  234     
//  235     WDT_counter++;
??WatchDogTimer_1:
        ADD.B   #0x1, &WDT_counter
//  236   
//  237 }
        POP.W   R14
        POP.W   R15
        POP.W   R12
        POP.W   R13
        RETI
        REQUIRE WDTCTL

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine0:
        CALL    #read_Identifier
        CALL    #set_Registers
        MOV.W   #0x80, &0x120
        RET
//  238 
//  239 
//  240 
//  241 // restart of the MSP430.  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  242 void resetWDT()
resetWDT:
//  243 {	    
//  244         //WDT_counter=0;     
//  245 	WDTCTL = WDTPW + WDTTMSEL+WDTCNTCL;
        MOV.W   #0x5a18, &0x120
//  246 }
        RET
        REQUIRE WDTCTL
//  247 
//  248 // Timeout configuration  
//  249 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  250 void Timeout()
Timeout:
//  251 {
        SUB.W   #0x10, SP
//  252       unsigned long aucDHCP       = 14400;
        MOV.W   #0x3840, 0xc(SP)
        MOV.W   #0x0, 0xe(SP)
//  253         unsigned long aucARP        = 14400;
        MOV.W   #0x3840, 0x8(SP)
        MOV.W   #0x0, 0xa(SP)
//  254         unsigned long aucKeepalive  = 14400;
        MOV.W   #0x3840, 0x4(SP)
        MOV.W   #0x0, 0x6(SP)
//  255         unsigned long aucInactivity = 5;
        MOV.W   #0x5, 0(SP)
        MOV.W   #0x0, 0x2(SP)
//  256 
//  257         netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity);
        MOV.W   SP, R15
        MOV.W   SP, R14
        ADD.W   #0x4, R14
        MOV.W   SP, R13
        ADD.W   #0x8, R13
        MOV.W   SP, R12
        ADD.W   #0xc, R12
        CALL    #netapp_timeout_values
//  258 }
        ADD.W   #0x10, SP
        RET

        COMMON INTVEC:CONST:ROOT(1)
        ORG 20
`??WatchDogTimer::??INTVEC 20`:
        DC16    WatchDogTimer

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  259 
// 
// 408 bytes in segment CODE
//  34 bytes in segment DATA16_AN
//   1 byte  in segment DATA16_Z
//   2 bytes in segment INTVEC
// 
// 408 bytes of CODE  memory
//   0 bytes of CONST memory (+  2 bytes shared)
//   1 byte  of DATA  memory (+ 34 bytes shared)
//
//Errors: none
//Warnings: none
