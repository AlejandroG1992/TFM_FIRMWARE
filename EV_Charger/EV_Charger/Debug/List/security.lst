###############################################################################
#
# IAR C/C++ Compiler V6.20.1.931/W32 for MSP430           12/Dec/2016  09:55:04
# Copyright 1996-2014 IAR Systems AB.
# Network license: ISIGRUP (STD)
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  Z:\EV_Charger\Source\CC3000HostDriver\security.c
#    Command line  =  
#        Z:\EV_Charger\Source\CC3000HostDriver\security.c -D
#        MDNS_ADVERTISE_HOST -D CC3000_UNENCRYPTED_SMART_CONFIG -lcN
#        Z:\EV_Charger\EV_Charger\Debug\List\ --diag_suppress Pa039 -o
#        Z:\EV_Charger\EV_Charger\Debug\Obj\ --debug -D__MSP430AFE253__ -e
#        --double=32 --dlib_config "C:\Archivos de programa\IAR
#        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430fn.h"
#        --library_module -I
#        Z:\EV_Charger\EV_Charger\..\Source\CC3000HostDriver\ -I
#        Z:\EV_Charger\EV_Charger\..\Source\inc\ -Ohz --multiplier=16s
#    List file     =  Z:\EV_Charger\EV_Charger\Debug\List\security.lst
#    Object file   =  Z:\EV_Charger\EV_Charger\Debug\Obj\security.r43
#
###############################################################################

Z:\EV_Charger\Source\CC3000HostDriver\security.c
      1          /*****************************************************************************
      2          *
      3          *  security.c  - CC3000 Host Driver Implementation.
      4          *  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
      5          *
      6          *  Redistribution and use in source and binary forms, with or without
      7          *  modification, are permitted provided that the following conditions
      8          *  are met:
      9          *
     10          *    Redistributions of source code must retain the above copyright
     11          *    notice, this list of conditions and the following disclaimer.
     12          *
     13          *    Redistributions in binary form must reproduce the above copyright
     14          *    notice, this list of conditions and the following disclaimer in the
     15          *    documentation and/or other materials provided with the   
     16          *    distribution.
     17          *
     18          *    Neither the name of Texas Instruments Incorporated nor the names of
     19          *    its contributors may be used to endorse or promote products derived
     20          *    from this software without specific prior written permission.
     21          *
     22          *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
     23          *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
     24          *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     25          *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
     26          *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     27          *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
     28          *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     29          *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     30          *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
     31          *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
     32          *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     33          *
     34          *****************************************************************************/
     35          
     36          //*****************************************************************************
     37          //
     38          //! \addtogroup security_api
     39          //! @{
     40          //
     41          //*****************************************************************************
     42          
     43          #include "security.h"
     44          
     45          #ifndef CC3000_UNENCRYPTED_SMART_CONFIG
     46          // foreward sbox
     47          const UINT8 sbox[256] =   { 
     48          //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
     49          0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
     50          0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
     51          0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
     52          0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
     53          0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
     54          0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
     55          0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
     56          0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
     57          0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
     58          0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
     59          0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
     60          0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
     61          0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
     62          0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
     63          0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
     64          0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; //F   
     65          // inverse sbox
     66          const UINT8 rsbox[256] =
     67          { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb
     68          , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb
     69          , 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e
     70          , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25
     71          , 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92
     72          , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84
     73          , 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06
     74          , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b
     75          , 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73
     76          , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e
     77          , 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b
     78          , 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4
     79          , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f
     80          , 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef
     81          , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61
     82          , 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
     83          // round constant
     84          const UINT8 Rcon[11] = {
     85            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
     86          
     87          
     88          UINT8 expandedKey[176];
     89          
     90          //*****************************************************************************
     91          //
     92          //!  expandKey
     93          //!
     94          //!  @param  key          AES128 key - 16 bytes
     95          //!  @param  expandedKey  expanded AES128 key
     96          //!
     97          //!  @return  none
     98          //!
     99          //!  @brief  expend a 16 bytes key for AES128 implementation
    100          //!
    101          //*****************************************************************************
    102          
    103          void expandKey(UINT8 *expandedKey, UINT8 *key)
    104          {
    105            UINT16 ii, buf1;
    106            for (ii=0;ii<16;ii++)
    107              expandedKey[ii] = key[ii];
    108            for (ii=1;ii<11;ii++){
    109              buf1 = expandedKey[ii*16 - 4];
    110              expandedKey[ii*16 + 0] = sbox[expandedKey[ii*16 - 3]]^expandedKey[(ii-1)*16 + 0]^Rcon[ii];
    111              expandedKey[ii*16 + 1] = sbox[expandedKey[ii*16 - 2]]^expandedKey[(ii-1)*16 + 1];
    112              expandedKey[ii*16 + 2] = sbox[expandedKey[ii*16 - 1]]^expandedKey[(ii-1)*16 + 2];
    113              expandedKey[ii*16 + 3] = sbox[buf1                  ]^expandedKey[(ii-1)*16 + 3];
    114              expandedKey[ii*16 + 4] = expandedKey[(ii-1)*16 + 4]^expandedKey[ii*16 + 0];
    115              expandedKey[ii*16 + 5] = expandedKey[(ii-1)*16 + 5]^expandedKey[ii*16 + 1];
    116              expandedKey[ii*16 + 6] = expandedKey[(ii-1)*16 + 6]^expandedKey[ii*16 + 2];
    117              expandedKey[ii*16 + 7] = expandedKey[(ii-1)*16 + 7]^expandedKey[ii*16 + 3];
    118              expandedKey[ii*16 + 8] = expandedKey[(ii-1)*16 + 8]^expandedKey[ii*16 + 4];
    119              expandedKey[ii*16 + 9] = expandedKey[(ii-1)*16 + 9]^expandedKey[ii*16 + 5];
    120              expandedKey[ii*16 +10] = expandedKey[(ii-1)*16 +10]^expandedKey[ii*16 + 6];
    121              expandedKey[ii*16 +11] = expandedKey[(ii-1)*16 +11]^expandedKey[ii*16 + 7];
    122              expandedKey[ii*16 +12] = expandedKey[(ii-1)*16 +12]^expandedKey[ii*16 + 8];
    123              expandedKey[ii*16 +13] = expandedKey[(ii-1)*16 +13]^expandedKey[ii*16 + 9];
    124              expandedKey[ii*16 +14] = expandedKey[(ii-1)*16 +14]^expandedKey[ii*16 +10];
    125              expandedKey[ii*16 +15] = expandedKey[(ii-1)*16 +15]^expandedKey[ii*16 +11];
    126            }
    127          	
    128          }
    129          
    130          //*****************************************************************************
    131          //
    132          //!  galois_mul2
    133          //!
    134          //!  @param  value    argument to multiply
    135          //!
    136          //!  @return  multiplied argument
    137          //!
    138          //!  @brief  multiply by 2 in the galois field
    139          //!
    140          //*****************************************************************************
    141          
    142          UINT8 galois_mul2(UINT8 value)
    143          {
    144          	if (value>>7)
    145          	{
    146          		value = value << 1;
    147          		return (value^0x1b);
    148          	} else
    149          		return value<<1;
    150          }
    151          
    152          //*****************************************************************************
    153          //
    154          //!  aes_encr
    155          //!
    156          //!  @param[in]  expandedKey expanded AES128 key
    157          //!  @param[in/out] state 16 bytes of plain text and cipher text
    158          //!
    159          //!  @return  none
    160          //!
    161          //!  @brief   internal implementation of AES128 encryption.
    162          //!           straight forward aes encryption implementation
    163          //!           first the group of operations
    164          //!          - addRoundKey
    165          //!          - subbytes
    166          //!          - shiftrows
    167          //!          - mixcolums
    168          //!          is executed 9 times, after this addroundkey to finish the 9th 
    169          //!          round, after that the 10th round without mixcolums
    170          //!          no further subfunctions to save cycles for function calls
    171          //!          no structuring with "for (....)" to save cycles.
    172          //!	 
    173          //!
    174          //*****************************************************************************
    175          
    176          void aes_encr(UINT8 *state, UINT8 *expandedKey)
    177          {
    178            UINT8 buf1, buf2, buf3, round;
    179          		
    180            for (round = 0; round < 9; round ++){
    181              // addroundkey, sbox and shiftrows
    182              // row 0
    183              state[ 0]  = sbox[(state[ 0] ^ expandedKey[(round*16)     ])];
    184              state[ 4]  = sbox[(state[ 4] ^ expandedKey[(round*16) +  4])];
    185              state[ 8]  = sbox[(state[ 8] ^ expandedKey[(round*16) +  8])];
    186              state[12]  = sbox[(state[12] ^ expandedKey[(round*16) + 12])];
    187              // row 1
    188              buf1 = state[1] ^ expandedKey[(round*16) + 1];
    189              state[ 1]  = sbox[(state[ 5] ^ expandedKey[(round*16) +  5])];
    190              state[ 5]  = sbox[(state[ 9] ^ expandedKey[(round*16) +  9])];
    191              state[ 9]  = sbox[(state[13] ^ expandedKey[(round*16) + 13])];
    192              state[13]  = sbox[buf1];
    193              // row 2
    194              buf1 = state[2] ^ expandedKey[(round*16) + 2];
    195              buf2 = state[6] ^ expandedKey[(round*16) + 6];
    196              state[ 2]  = sbox[(state[10] ^ expandedKey[(round*16) + 10])];
    197              state[ 6]  = sbox[(state[14] ^ expandedKey[(round*16) + 14])];
    198              state[10]  = sbox[buf1];
    199              state[14]  = sbox[buf2];
    200              // row 3
    201              buf1 = state[15] ^ expandedKey[(round*16) + 15];
    202              state[15]  = sbox[(state[11] ^ expandedKey[(round*16) + 11])];
    203              state[11]  = sbox[(state[ 7] ^ expandedKey[(round*16) +  7])];
    204              state[ 7]  = sbox[(state[ 3] ^ expandedKey[(round*16) +  3])];
    205              state[ 3]  = sbox[buf1];
    206              
    207              // mixcolums //////////
    208              // col1
    209              buf1 = state[0] ^ state[1] ^ state[2] ^ state[3];
    210              buf2 = state[0];
    211              buf3 = state[0]^state[1]; buf3=galois_mul2(buf3); state[0] = state[0] ^ buf3 ^ buf1;
    212              buf3 = state[1]^state[2]; buf3=galois_mul2(buf3); state[1] = state[1] ^ buf3 ^ buf1;
    213              buf3 = state[2]^state[3]; buf3=galois_mul2(buf3); state[2] = state[2] ^ buf3 ^ buf1;
    214              buf3 = state[3]^buf2;     buf3=galois_mul2(buf3); state[3] = state[3] ^ buf3 ^ buf1;
    215              // col2
    216              buf1 = state[4] ^ state[5] ^ state[6] ^ state[7];
    217              buf2 = state[4];
    218              buf3 = state[4]^state[5]; buf3=galois_mul2(buf3); state[4] = state[4] ^ buf3 ^ buf1;
    219              buf3 = state[5]^state[6]; buf3=galois_mul2(buf3); state[5] = state[5] ^ buf3 ^ buf1;
    220              buf3 = state[6]^state[7]; buf3=galois_mul2(buf3); state[6] = state[6] ^ buf3 ^ buf1;
    221              buf3 = state[7]^buf2;     buf3=galois_mul2(buf3); state[7] = state[7] ^ buf3 ^ buf1;
    222              // col3
    223              buf1 = state[8] ^ state[9] ^ state[10] ^ state[11];
    224              buf2 = state[8];
    225              buf3 = state[8]^state[9];   buf3=galois_mul2(buf3); state[8] = state[8] ^ buf3 ^ buf1;
    226              buf3 = state[9]^state[10];  buf3=galois_mul2(buf3); state[9] = state[9] ^ buf3 ^ buf1;
    227              buf3 = state[10]^state[11]; buf3=galois_mul2(buf3); state[10] = state[10] ^ buf3 ^ buf1;
    228              buf3 = state[11]^buf2;      buf3=galois_mul2(buf3); state[11] = state[11] ^ buf3 ^ buf1;
    229              // col4
    230              buf1 = state[12] ^ state[13] ^ state[14] ^ state[15];
    231              buf2 = state[12];
    232              buf3 = state[12]^state[13]; buf3=galois_mul2(buf3); state[12] = state[12] ^ buf3 ^ buf1;
    233              buf3 = state[13]^state[14]; buf3=galois_mul2(buf3); state[13] = state[13] ^ buf3 ^ buf1;
    234              buf3 = state[14]^state[15]; buf3=galois_mul2(buf3); state[14] = state[14] ^ buf3 ^ buf1;
    235              buf3 = state[15]^buf2;      buf3=galois_mul2(buf3); state[15] = state[15] ^ buf3 ^ buf1;    
    236          		
    237            }
    238            // 10th round without mixcols
    239            state[ 0]  = sbox[(state[ 0] ^ expandedKey[(round*16)     ])];
    240            state[ 4]  = sbox[(state[ 4] ^ expandedKey[(round*16) +  4])];
    241            state[ 8]  = sbox[(state[ 8] ^ expandedKey[(round*16) +  8])];
    242            state[12]  = sbox[(state[12] ^ expandedKey[(round*16) + 12])];
    243            // row 1
    244            buf1 = state[1] ^ expandedKey[(round*16) + 1];
    245            state[ 1]  = sbox[(state[ 5] ^ expandedKey[(round*16) +  5])];
    246            state[ 5]  = sbox[(state[ 9] ^ expandedKey[(round*16) +  9])];
    247            state[ 9]  = sbox[(state[13] ^ expandedKey[(round*16) + 13])];
    248            state[13]  = sbox[buf1];
    249            // row 2
    250            buf1 = state[2] ^ expandedKey[(round*16) + 2];
    251            buf2 = state[6] ^ expandedKey[(round*16) + 6];
    252            state[ 2]  = sbox[(state[10] ^ expandedKey[(round*16) + 10])];
    253            state[ 6]  = sbox[(state[14] ^ expandedKey[(round*16) + 14])];
    254            state[10]  = sbox[buf1];
    255            state[14]  = sbox[buf2];
    256            // row 3
    257            buf1 = state[15] ^ expandedKey[(round*16) + 15];
    258            state[15]  = sbox[(state[11] ^ expandedKey[(round*16) + 11])];
    259            state[11]  = sbox[(state[ 7] ^ expandedKey[(round*16) +  7])];
    260            state[ 7]  = sbox[(state[ 3] ^ expandedKey[(round*16) +  3])];
    261            state[ 3]  = sbox[buf1];
    262            // last addroundkey
    263            state[ 0]^=expandedKey[160];
    264            state[ 1]^=expandedKey[161];
    265            state[ 2]^=expandedKey[162];
    266            state[ 3]^=expandedKey[163];
    267            state[ 4]^=expandedKey[164];
    268            state[ 5]^=expandedKey[165];
    269            state[ 6]^=expandedKey[166];
    270            state[ 7]^=expandedKey[167];
    271            state[ 8]^=expandedKey[168];
    272            state[ 9]^=expandedKey[169];
    273            state[10]^=expandedKey[170];
    274            state[11]^=expandedKey[171];
    275            state[12]^=expandedKey[172];
    276            state[13]^=expandedKey[173];
    277            state[14]^=expandedKey[174]; 
    278            state[15]^=expandedKey[175];
    279          } 
    280          
    281          //*****************************************************************************
    282          //
    283          //!  aes_decr
    284          //!
    285          //!  @param[in]  expandedKey expanded AES128 key
    286          //!  @param[in\out] state 16 bytes of cipher text and plain text
    287          //!
    288          //!  @return  none
    289          //!
    290          //!  @brief   internal implementation of AES128 decryption.
    291          //!           straight forward aes decryption implementation
    292          //!           the order of substeps is the exact reverse of decryption
    293          //!           inverse functions:
    294          //!            - addRoundKey is its own inverse
    295          //!            - rsbox is inverse of sbox
    296          //!            - rightshift instead of leftshift
    297          //!            - invMixColumns = barreto + mixColumns
    298          //!           no further subfunctions to save cycles for function calls
    299          //!           no structuring with "for (....)" to save cycles
    300          //!
    301          //*****************************************************************************
    302          
    303          void aes_decr(UINT8 *state, UINT8 *expandedKey)
    304          {
    305            UINT8 buf1, buf2, buf3;
    306            INT8 round;
    307            round = 9;
    308          	
    309            // initial addroundkey
    310            state[ 0]^=expandedKey[160];
    311            state[ 1]^=expandedKey[161];
    312            state[ 2]^=expandedKey[162];
    313            state[ 3]^=expandedKey[163];
    314            state[ 4]^=expandedKey[164];
    315            state[ 5]^=expandedKey[165];
    316            state[ 6]^=expandedKey[166];
    317            state[ 7]^=expandedKey[167];
    318            state[ 8]^=expandedKey[168];
    319            state[ 9]^=expandedKey[169];
    320            state[10]^=expandedKey[170];
    321            state[11]^=expandedKey[171];
    322            state[12]^=expandedKey[172];
    323            state[13]^=expandedKey[173];
    324            state[14]^=expandedKey[174]; 
    325            state[15]^=expandedKey[175];
    326          	
    327            // 10th round without mixcols
    328            state[ 0]  = rsbox[state[ 0]] ^ expandedKey[(round*16)     ];
    329            state[ 4]  = rsbox[state[ 4]] ^ expandedKey[(round*16) +  4];
    330            state[ 8]  = rsbox[state[ 8]] ^ expandedKey[(round*16) +  8];
    331            state[12]  = rsbox[state[12]] ^ expandedKey[(round*16) + 12];
    332            // row 1
    333            buf1 =       rsbox[state[13]] ^ expandedKey[(round*16) +  1];
    334            state[13]  = rsbox[state[ 9]] ^ expandedKey[(round*16) + 13];
    335            state[ 9]  = rsbox[state[ 5]] ^ expandedKey[(round*16) +  9];
    336            state[ 5]  = rsbox[state[ 1]] ^ expandedKey[(round*16) +  5];
    337            state[ 1]  = buf1;
    338            // row 2
    339            buf1 =       rsbox[state[ 2]] ^ expandedKey[(round*16) + 10];
    340            buf2 =       rsbox[state[ 6]] ^ expandedKey[(round*16) + 14];
    341            state[ 2]  = rsbox[state[10]] ^ expandedKey[(round*16) +  2];
    342            state[ 6]  = rsbox[state[14]] ^ expandedKey[(round*16) +  6];
    343            state[10]  = buf1;
    344            state[14]  = buf2;
    345            // row 3
    346            buf1 =       rsbox[state[ 3]] ^ expandedKey[(round*16) + 15];
    347            state[ 3]  = rsbox[state[ 7]] ^ expandedKey[(round*16) +  3];
    348            state[ 7]  = rsbox[state[11]] ^ expandedKey[(round*16) +  7];
    349            state[11]  = rsbox[state[15]] ^ expandedKey[(round*16) + 11];
    350            state[15]  = buf1;
    351          	
    352            for (round = 8; round >= 0; round--){
    353              // barreto
    354              //col1
    355              buf1 = galois_mul2(galois_mul2(state[0]^state[2]));
    356              buf2 = galois_mul2(galois_mul2(state[1]^state[3]));
    357              state[0] ^= buf1;     state[1] ^= buf2;    state[2] ^= buf1;    state[3] ^= buf2;
    358              //col2
    359              buf1 = galois_mul2(galois_mul2(state[4]^state[6]));
    360              buf2 = galois_mul2(galois_mul2(state[5]^state[7]));
    361              state[4] ^= buf1;    state[5] ^= buf2;    state[6] ^= buf1;    state[7] ^= buf2;
    362              //col3
    363              buf1 = galois_mul2(galois_mul2(state[8]^state[10]));
    364              buf2 = galois_mul2(galois_mul2(state[9]^state[11]));
    365              state[8] ^= buf1;    state[9] ^= buf2;    state[10] ^= buf1;    state[11] ^= buf2;
    366              //col4
    367              buf1 = galois_mul2(galois_mul2(state[12]^state[14]));
    368              buf2 = galois_mul2(galois_mul2(state[13]^state[15]));
    369              state[12] ^= buf1;    state[13] ^= buf2;    state[14] ^= buf1;    state[15] ^= buf2;
    370              // mixcolums //////////
    371              // col1
    372              buf1 = state[0] ^ state[1] ^ state[2] ^ state[3];
    373              buf2 = state[0];
    374              buf3 = state[0]^state[1]; buf3=galois_mul2(buf3); state[0] = state[0] ^ buf3 ^ buf1;
    375              buf3 = state[1]^state[2]; buf3=galois_mul2(buf3); state[1] = state[1] ^ buf3 ^ buf1;
    376              buf3 = state[2]^state[3]; buf3=galois_mul2(buf3); state[2] = state[2] ^ buf3 ^ buf1;
    377              buf3 = state[3]^buf2;     buf3=galois_mul2(buf3); state[3] = state[3] ^ buf3 ^ buf1;
    378              // col2
    379              buf1 = state[4] ^ state[5] ^ state[6] ^ state[7];
    380              buf2 = state[4];
    381              buf3 = state[4]^state[5]; buf3=galois_mul2(buf3); state[4] = state[4] ^ buf3 ^ buf1;
    382              buf3 = state[5]^state[6]; buf3=galois_mul2(buf3); state[5] = state[5] ^ buf3 ^ buf1;
    383              buf3 = state[6]^state[7]; buf3=galois_mul2(buf3); state[6] = state[6] ^ buf3 ^ buf1;
    384              buf3 = state[7]^buf2;     buf3=galois_mul2(buf3); state[7] = state[7] ^ buf3 ^ buf1;
    385              // col3
    386              buf1 = state[8] ^ state[9] ^ state[10] ^ state[11];
    387              buf2 = state[8];
    388              buf3 = state[8]^state[9];   buf3=galois_mul2(buf3); state[8] = state[8] ^ buf3 ^ buf1;
    389              buf3 = state[9]^state[10];  buf3=galois_mul2(buf3); state[9] = state[9] ^ buf3 ^ buf1;
    390              buf3 = state[10]^state[11]; buf3=galois_mul2(buf3); state[10] = state[10] ^ buf3 ^ buf1;
    391              buf3 = state[11]^buf2;      buf3=galois_mul2(buf3); state[11] = state[11] ^ buf3 ^ buf1;
    392              // col4
    393              buf1 = state[12] ^ state[13] ^ state[14] ^ state[15];
    394              buf2 = state[12];
    395              buf3 = state[12]^state[13]; buf3=galois_mul2(buf3); state[12] = state[12] ^ buf3 ^ buf1;
    396              buf3 = state[13]^state[14]; buf3=galois_mul2(buf3); state[13] = state[13] ^ buf3 ^ buf1;
    397              buf3 = state[14]^state[15]; buf3=galois_mul2(buf3); state[14] = state[14] ^ buf3 ^ buf1;
    398              buf3 = state[15]^buf2;      buf3=galois_mul2(buf3); state[15] = state[15] ^ buf3 ^ buf1;    
    399          		
    400              // addroundkey, rsbox and shiftrows
    401              // row 0
    402              state[ 0]  = rsbox[state[ 0]] ^ expandedKey[(round*16)     ];
    403              state[ 4]  = rsbox[state[ 4]] ^ expandedKey[(round*16) +  4];
    404              state[ 8]  = rsbox[state[ 8]] ^ expandedKey[(round*16) +  8];
    405              state[12]  = rsbox[state[12]] ^ expandedKey[(round*16) + 12];
    406              // row 1
    407              buf1 =       rsbox[state[13]] ^ expandedKey[(round*16) +  1];
    408              state[13]  = rsbox[state[ 9]] ^ expandedKey[(round*16) + 13];
    409              state[ 9]  = rsbox[state[ 5]] ^ expandedKey[(round*16) +  9];
    410              state[ 5]  = rsbox[state[ 1]] ^ expandedKey[(round*16) +  5];
    411              state[ 1]  = buf1;
    412              // row 2
    413              buf1 =       rsbox[state[ 2]] ^ expandedKey[(round*16) + 10];
    414              buf2 =       rsbox[state[ 6]] ^ expandedKey[(round*16) + 14];
    415              state[ 2]  = rsbox[state[10]] ^ expandedKey[(round*16) +  2];
    416              state[ 6]  = rsbox[state[14]] ^ expandedKey[(round*16) +  6];
    417              state[10]  = buf1;
    418              state[14]  = buf2;
    419              // row 3
    420              buf1 =       rsbox[state[ 3]] ^ expandedKey[(round*16) + 15];
    421              state[ 3]  = rsbox[state[ 7]] ^ expandedKey[(round*16) +  3];
    422              state[ 7]  = rsbox[state[11]] ^ expandedKey[(round*16) +  7];
    423              state[11]  = rsbox[state[15]] ^ expandedKey[(round*16) + 11];
    424              state[15]  = buf1;
    425            }
    426          	
    427          } 
    428          
    429          //*****************************************************************************
    430          //
    431          //!  aes_encrypt
    432          //!
    433          //!  @param[in]  key   AES128 key of size 16 bytes
    434          //!  @param[in\out] state   16 bytes of plain text and cipher text
    435          //!
    436          //!  @return  none
    437          //!
    438          //!  @brief   AES128 encryption:
    439          //!           Given AES128 key and  16 bytes plain text, cipher text of 16 bytes
    440          //!           is computed. The AES implementation is in mode ECB (Electronic 
    441          //!           Code Book). 
    442          //!	 
    443          //!
    444          //*****************************************************************************
    445          
    446          void aes_encrypt(UINT8 *state, UINT8 *key)
    447          {
    448          	// expand the key into 176 bytes
    449          	expandKey(expandedKey, key);       
    450          	aes_encr(state, expandedKey);
    451          }
    452          
    453          //*****************************************************************************
    454          //
    455          //!  aes_decrypt
    456          //!
    457          //!  @param[in]  key   AES128 key of size 16 bytes
    458          //!  @param[in\out] state   16 bytes of cipher text and plain text
    459          //!
    460          //!  @return  none
    461          //!
    462          //!  @brief   AES128 decryption:
    463          //!           Given AES128 key and  16 bytes cipher text, plain text of 16 bytes
    464          //!           is computed The AES implementation is in mode ECB 
    465          //!           (Electronic Code Book).
    466          //!	 
    467          //!
    468          //*****************************************************************************
    469          
    470          void aes_decrypt(UINT8 *state, UINT8 *key)
    471          {
    472              expandKey(expandedKey, key);       // expand the key into 176 bytes
    473              aes_decr(state, expandedKey);
    474          }
    475          
    476          //*****************************************************************************
    477          //
    478          //!  aes_read_key
    479          //!
    480          //!  @param[out]  key   AES128 key of size 16 bytes
    481          //!
    482          //!  @return  on success 0, error otherwise.
    483          //!
    484          //!  @brief   Reads AES128 key from EEPROM
    485          //!           Reads the AES128 key from fileID #12 in EEPROM
    486          //!           returns an error if the key does not exist. 
    487          //!	 
    488          //!
    489          //*****************************************************************************
    490          
    491          INT32 aes_read_key(UINT8 *key)
    492          {
    493          	INT32	returnValue;
    494          	
    495          	returnValue = nvmem_read(NVMEM_AES128_KEY_FILEID, AES128_KEY_SIZE, 0, key);
    496          
    497          	return returnValue;
    498          }
    499          
    500          //*****************************************************************************
    501          //
    502          //!  aes_write_key
    503          //!
    504          //!  @param[out]  key   AES128 key of size 16 bytes
    505          //!
    506          //!  @return  on success 0, error otherwise.
    507          //!
    508          //!  @brief   writes AES128 key from EEPROM
    509          //!           Writes the AES128 key to fileID #12 in EEPROM
    510          //!	 
    511          //!
    512          //*****************************************************************************
    513          
    514          INT32 aes_write_key(UINT8 *key)
    515          {
    516          	INT32	returnValue;
    517          
    518          	returnValue = nvmem_write(NVMEM_AES128_KEY_FILEID, AES128_KEY_SIZE, 0, key);
    519          
    520          	return returnValue;
    521          }
    522          
    523          #endif //CC3000_UNENCRYPTED_SMART_CONFIG
    524          
    525          //*****************************************************************************
    526          //
    527          // Close the Doxygen group.
    528          //! @}
    529          //
    530          //*****************************************************************************


 

 


Errors: none
Warnings: none
