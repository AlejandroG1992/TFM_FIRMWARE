###############################################################################
#
# IAR C/C++ Compiler V6.20.1.931/W32 for MSP430           13/Dec/2016  10:36:44
# Copyright 1996-2014 IAR Systems AB.
# Network license: ISIGRUP (STD)
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  Z:\EV_Charger\Source\EV_Charger\SmartConfig.c
#    Command line  =  
#        Z:\EV_Charger\Source\EV_Charger\SmartConfig.c -D
#        CC3000_UNENCRYPTED_SMART_CONFIG -lCN
#        Z:\EV_Charger\EV_Charger\Debug\List\ -lB
#        Z:\EV_Charger\EV_Charger\Debug\List\ -o
#        Z:\EV_Charger\EV_Charger\Debug\Obj\ --debug -D__MSP430AFE253__ -e
#        --double=32 --dlib_config "C:\Archivos de programa\IAR
#        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430fn.h" -I
#        Z:\EV_Charger\EV_Charger\..\Source\CC3000HostDriver\ -I
#        "Z:\EV_Charger\EV_Charger\..\Source\\HyperTerminal Driver\" -I
#        "Z:\EV_Charger\EV_Charger\..\Source\\CC3000 Spi\" -I
#        Z:\EV_Charger\EV_Charger\..\Source\inc\ -Oh --multiplier=16s
#    List file     =  Z:\EV_Charger\EV_Charger\Debug\List\SmartConfig.lst
#    Object file   =  Z:\EV_Charger\EV_Charger\Debug\Obj\SmartConfig.r43
#
###############################################################################

Z:\EV_Charger\Source\EV_Charger\SmartConfig.c
      1          #include "wlan.h" 
      2          #include "evnt_handler.h"    
      3          #include "nvmem.h"
      4          #include "socket.h"
      5          #include "netapp.h"
      6          #include "spi.h"
      7          #include "spi_version.h"
      8          #include "board.h"
      9          #include "application_version.h"
     10          #include "host_driver_version.h"
     11          #include "security.h"
     12          #include "Main.h"
     13          #include "board.h"
     14          #include "Analog_sampling.h"
     15          #include "ControlPilot.h"
     16          #include "Listener.h"
     17          #include "SmartConfig.h"
     18          #include "Wattmeter.h"
     19          #include "Wifi.h"
     20          
     21          #include <msp430.h>
     22          
     23          
     24          //!  @brief  The function triggers a smart configuration process on CC3000.
     25          //!			it exists upon completion of the process
     26          

   \                                 In  segment CODE, align 2
     27          void StartSmartConfig(void)
   \                     StartSmartConfig:
     28          {
     29              stopCharge();
   \   000000   B012....     CALL    #stopCharge
     30              ulSmartConfigFinished = 0;
   \   000004   8243....     MOV.W   #0x0, &ulSmartConfigFinished
   \   000008   8243....     MOV.W   #0x0, &ulSmartConfigFinished + 2
     31              ulCC3000Connected = 0;
   \   00000C   8243....     MOV.W   #0x0, &ulCC3000Connected
   \   000010   8243....     MOV.W   #0x0, &ulCC3000Connected + 2
     32              ulCC3000DHCP = 0;
   \   000014   8243....     MOV.W   #0x0, &ulCC3000DHCP
   \   000018   8243....     MOV.W   #0x0, &ulCC3000DHCP + 2
     33              OkToDoShutDown=0;
   \   00001C   8243....     MOV.W   #0x0, &OkToDoShutDown
   \   000020   8243....     MOV.W   #0x0, &OkToDoShutDown + 2
     34              
     35              // Reset all the previous configuration
     36              wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);	
   \   000024   0312         PUSH.W  #0x0
   \   000026   0312         PUSH.W  #0x0
   \   000028   B012....     CALL    #?Subroutine1
     37              wlan_ioctl_del_profile(255);
   \                     ??CrossCallReturnLabel_4:
   \   00002C   7C43         MOV.B   #0xff, R12
   \   00002E   0D43         MOV.W   #0x0, R13
   \   000030   B012....     CALL    #wlan_ioctl_del_profile
     38              
     39               // Reset all the previous configuration
     40              wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);	
   \   000034   0312         PUSH.W  #0x0
   \   000036   0312         PUSH.W  #0x0
   \   000038   B012....     CALL    #?Subroutine1
     41              wlan_ioctl_del_profile(255);
   \                     ??CrossCallReturnLabel_3:
   \   00003C   7C43         MOV.B   #0xff, R12
   \   00003E   0D43         MOV.W   #0x0, R13
   \   000040   B012....     CALL    #wlan_ioctl_del_profile
   \   000044   3152         ADD.W   #0x8, SP
   \   000046   053C         JMP     ??StartSmartConfig_2
     42              
     43              // Wait until CC3000 is disconnected
     44              while (ulCC3000Connected == 1)
     45              {
     46                      __delay_cycles(333);
   \                     ??StartSmartConfig_0:
   \   000048                ////////////// Start of 333 cycles delay.
   \   000048   0343         NOP
   \   00004A   3F406D00     MOV.W   #0x6d, R15
   \                     ??StartSmartConfig_5:
   \   00004E   3F53         ADD.W   #0xffff, R15
   \   000050   FE2F         JC      ??StartSmartConfig_5
   \   000052                ////////////// End of delay code.
     47              }
   \                     ??StartSmartConfig_2:
   \   000052   9293....     CMP.W   #0x1, &ulCC3000Connected
   \   000056   0320         JNE     ??StartSmartConfig_3
   \   000058   8293....     CMP.W   #0x0, &ulCC3000Connected + 2
   \   00005C   F527         JEQ     ??StartSmartConfig_0
     48              
     49              // Trigger the Smart Config process
     50           	
     51              wlan_smart_config_set_prefix((char*)aucCC3000_prefix);
   \                     ??StartSmartConfig_3:
   \   00005E   3C40....     MOV.W   #aucCC3000_prefix, R12
   \   000062   B012....     CALL    #wlan_smart_config_set_prefix
     52          	     
     53              
     54              // Start the SmartConfig start process
     55          #ifdef CC3000_UNENCRYPTED_SMART_CONFIG
     56              wlan_smart_config_start(0);
   \   000066   0C43         MOV.W   #0x0, R12
   \   000068   0D43         MOV.W   #0x0, R13
   \   00006A   B012....     CALL    #wlan_smart_config_start
     57          #else
     58              wlan_smart_config_start(1);
     59          #endif  
     60              startCharge();                                                                         
   \   00006E   B012....     CALL    #startCharge
   \   000072   043C         JMP     ??StartSmartConfig_4
     61              // Wait for Smartconfig process complete
     62              while (ulSmartConfigFinished == 0)
     63              {
     64                  __delay_cycles(2000000);
   \                     ??StartSmartConfig_1:
   \   000074   B012....     CALL    #?Subroutine0
     65                  __delay_cycles(2000000);                     
   \                     ??CrossCallReturnLabel_0:
   \   000078   B012....     CALL    #?Subroutine0
     66              }
   \                     ??StartSmartConfig_4:
   \   00007C   1F42....     MOV.W   &ulSmartConfigFinished, R15
   \   000080   1FD2....     BIS.W   &ulSmartConfigFinished + 2, R15
   \   000084   0F93         CMP.W   #0x0, R15
   \   000086   F627         JEQ     ??StartSmartConfig_1
     67              
     68              stopCharge();
   \   000088   B012....     CALL    #stopCharge
     69          
     70          #ifndef CC3000_UNENCRYPTED_SMART_CONFIG
     71              // Create new entry for AES encryption key
     72              nvmem_create_entry(NVMEM_AES128_KEY_FILEID,16);
     73              
     74              // Write AES key to NVMEM
     75              aes_write_key((unsigned char *)(&smartconfigkey[0]));
     76              turnLedOn();
     77              // Decrypt configuration information and add profile
     78              wlan_smart_config_process();
     79              turnLedOff();
     80          #endif    
     81              
     82              // Configure to connect automatically to the AP retrieved in the 
     83              // Smart config process
     84              wlan_ioctl_set_connection_policy(DISABLE, ENABLE, ENABLE);
   \   00008C   0312         PUSH.W  #0x0
   \   00008E   1312         PUSH.W  #0x1
   \   000090   1E43         MOV.W   #0x1, R14
   \   000092   B012....     CALL    #??Subroutine2_0
     85              
     86              // Reset the CC3000
     87              wlan_stop();
   \                     ??CrossCallReturnLabel_2:
   \   000096   B012....     CALL    #wlan_stop
     88              
     89              __delay_cycles(2000000);
   \   00009A   B012....     CALL    #?Subroutine0
     90              
     91              wlan_start(0);
   \                     ??CrossCallReturnLabel_1:
   \   00009E   0C43         MOV.W   #0x0, R12
   \   0000A0   B012....     CALL    #wlan_start
     92              
     93              // Mask out all non-required events
     94              wlan_set_event_mask(HCI_EVENT_MASK);
   \   0000A4   3C404482     MOV.W   #0x8244, R12
   \   0000A8   0D43         MOV.W   #0x0, R13
   \   0000AA   B012....     CALL    #wlan_set_event_mask
     95              
     96              __delay_cycles(20000000);  
   \   0000AE                ////////////// Start of 20000000 cycles delay.
   \   0000AE   3F403E4B     MOV.W   #0x4b3e, R15
   \   0000B2   3E404C00     MOV.W   #0x4c, R14
   \                     ??StartSmartConfig_6:
   \   0000B6   3F53         ADD.W   #0xffff, R15
   \   0000B8   3E63         ADDC.W  #0xffff, R14
   \   0000BA   FD2F         JC      ??StartSmartConfig_6
   \   0000BC                ////////////// End of delay code.
     97              
     98              //datos= "ConfigOK";            
     99                  
    100          }
   \   0000BC   2152         ADD.W   #0x4, SP
   \   0000BE   3041         RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   0E43         MOV.W   #0x0, R14
   \   000002                REQUIRE ??Subroutine2_0
   \   000002                // Fall through to label ??Subroutine2_0

   \                                 In  segment CODE, align 2
   \                     ??Subroutine2_0:
   \   000000   0F43         MOV.W   #0x0, R15
   \   000002   0C43         MOV.W   #0x0, R12
   \   000004   0D43         MOV.W   #0x0, R13
   \   000006   3040....     BR      #wlan_ioctl_set_connection_policy

   \                                 In  segment CODE, align 2
   \                     ?Subroutine0:
   \   000000                ////////////// Start of 2000000 cycles delay.
   \   000000   3F401EA1     MOV.W   #0xa11e, R15
   \   000004   3E400700     MOV.W   #0x7, R14
   \                     ??Subroutine0_0:
   \   000008   3F53         ADD.W   #0xffff, R15
   \   00000A   3E63         ADDC.W  #0xffff, R14
   \   00000C   FD2F         JC      ??Subroutine0_0
   \   00000E                ////////////// End of delay code.
   \   00000E   3041         RET

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     10   StartSmartConfig
        2   -> startCharge
        2   -> stopCharge
       10   -> wlan_ioctl_del_profile
        6   -> wlan_ioctl_del_profile
       10   -> wlan_ioctl_set_connection_policy
        6   -> wlan_ioctl_set_connection_policy
        6   -> wlan_set_event_mask
        2   -> wlan_smart_config_set_prefix
        2   -> wlan_smart_config_start
        6   -> wlan_start
        6   -> wlan_stop


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ??Subroutine2_0
      16  ?Subroutine0
       2  ?Subroutine1
     192  StartSmartConfig

 
 220 bytes in segment CODE
 
 220 bytes of CODE memory

Errors: none
Warnings: none
