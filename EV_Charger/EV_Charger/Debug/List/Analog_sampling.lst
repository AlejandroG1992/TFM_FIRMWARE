###############################################################################
#
# IAR C/C++ Compiler V6.20.1.931/W32 for MSP430           13/Dec/2016  10:36:41
# Copyright 1996-2014 IAR Systems AB.
# Network license: ISIGRUP (STD)
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  Z:\EV_Charger\Source\EV_Charger\Analog_sampling.c
#    Command line  =  
#        Z:\EV_Charger\Source\EV_Charger\Analog_sampling.c -D
#        CC3000_UNENCRYPTED_SMART_CONFIG -lCN
#        Z:\EV_Charger\EV_Charger\Debug\List\ -lB
#        Z:\EV_Charger\EV_Charger\Debug\List\ -o
#        Z:\EV_Charger\EV_Charger\Debug\Obj\ --debug -D__MSP430AFE253__ -e
#        --double=32 --dlib_config "C:\Archivos de programa\IAR
#        Systems\Embedded Workbench 7.0\430\lib\dlib\dl430fn.h" -I
#        Z:\EV_Charger\EV_Charger\..\Source\CC3000HostDriver\ -I
#        "Z:\EV_Charger\EV_Charger\..\Source\\HyperTerminal Driver\" -I
#        "Z:\EV_Charger\EV_Charger\..\Source\\CC3000 Spi\" -I
#        Z:\EV_Charger\EV_Charger\..\Source\inc\ -Oh --multiplier=16s
#    List file     =  Z:\EV_Charger\EV_Charger\Debug\List\Analog_sampling.lst
#    Object file   =  Z:\EV_Charger\EV_Charger\Debug\Obj\Analog_sampling.r43
#
###############################################################################

Z:\EV_Charger\Source\EV_Charger\Analog_sampling.c
      1          #include "ControlPilot.h"
      2          #include "Main.h"
      3          #include "Wattmeter.h"
      4          #include "Charger_States.h"
      5          #include "Analog_sampling.h"
      6          #include "ControlPilot.h"
      7          #include <msp430.h>

   \                                 In  segment DATA16_AN, at 0x21
   \   unsigned char volatile P1OUT
   \                     P1OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x106
   \   unsigned short volatile SD24CCTL2
   \                     SD24CCTL2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x110
   \   unsigned short volatile SD24MEM0
   \                     SD24MEM0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x112
   \   unsigned short volatile SD24MEM1
   \                     SD24MEM1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x114
   \   unsigned short volatile SD24MEM2
   \                     SD24MEM2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x1ae
   \   unsigned short volatile SD24IV
   \                     SD24IV:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x12e
   \   unsigned short const volatile TAIV
   \                     TAIV:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x164
   \   unsigned short volatile TACCTL1
   \                     TACCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x176
   \   unsigned short volatile TACCR2
   \                     TACCR2:
   \   000000                DS8 2
      8          
      9          
     10          
     11          #pragma vector=SD24_VECTOR

   \                                 In  segment CODE, align 2
     12          __interrupt void SD24AISR(void)
   \                     SD24AISR:
     13          {
   \   000000   0D12         PUSH.W  R13
   \   000002   0C12         PUSH.W  R12
   \   000004   0F12         PUSH.W  R15
   \   000006   0E12         PUSH.W  R14
     14            
     15            unsigned short voltage,current;
     16            unsigned short Pilot;
     17            
     18            switch (SD24IV)
   \   000008   1F42AE01     MOV.W   &0x1ae, R15
   \   00000C   3F800600     SUB.W   #0x6, R15
   \   000010   0324         JEQ     ??SD24AISR_0
   \   000012   2F83         SUB.W   #0x2, R15
   \   000014   0B24         JEQ     ??SD24AISR_1
   \   000016   203C         JMP     ??SD24AISR_2
     19            {
     20            case 2:                       // SD24MEM Overflow
     21              break;
     22            case 4:                       // SD24MEM0 IFG
     23              break;
     24            case 6:                       // SD24MEM1 IFG  
     25             
     26              voltage = SD24MEM0;         // Save CH0 results (clears IFG)
   \                     ??SD24AISR_0:
   \   000018   1C421001     MOV.W   &0x110, R12
     27              current = SD24MEM1;         // Save CH1 results (clears IFG)
   \   00001C   1D421201     MOV.W   &0x112, R13
     28               if( (P1OUT& BIT0)==BIT0)
   \   000020   D2B32100     BIT.B   #0x1, &0x21
   \   000024   1928         JNC     ??SD24AISR_2
     29              {       
     30                 calculatePower(voltage, current); 
   \   000026   B012....     CALL    #calculatePower
   \   00002A   163C         JMP     ??SD24AISR_2
     31              }
     32                
     33              
     34              break;
     35              
     36            case 8:                       // SD24MEM2 IFG   
     37              
     38          
     39            
     40              if(TACCR2==240)
   \                     ??SD24AISR_1:
   \   00002C   B290F0007601 CMP.W   #0xf0, &0x176
   \   000032   0A20         JNE     ??SD24AISR_3
     41              {
     42                  Pilot=SD24MEM2;
   \   000034   1C421401     MOV.W   &0x114, R12
     43                 
     44                  
     45                  TACCR2=7760;
   \   000038   B240501E7601 MOV.W   #0x1e50, &0x176
     46                  CheckPilot(Pilot);
   \   00003E   B012....     CALL    #CheckPilot
     47                   
     48                  
     49                  Charger_States();
   \   000042   B012....     CALL    #Charger_States
   \   000046   083C         JMP     ??SD24AISR_2
     50              }
     51              else
     52              {
     53                  Pilot=SD24MEM2;
   \                     ??SD24AISR_3:
   \   000048   82931401     CMP.W   #0x0, &0x114
     54                  TACCR2=240;
   \   00004C   B240F0007601 MOV.W   #0xf0, &0x176
     55                  //Verify Pilot_L
     56                  if(((Pilot<39493)|(Pilot>43500))&(TACCTL1 = OUTMOD_6))   //-13V<Pilot_L<-11V & Pilot ON
   \   000052   B240C0006401 MOV.W   #0xc0, &0x164
     57                      {
     58                        Pilot_State='G';
     59                        Pilot_Num=0;
     60                        return;
     61                      }
     62                 
     63                 
     64              }
     65            //P1OUT &= ~BIT6;
     66              
     67              break;
     68            }
     69          }
   \                     ??SD24AISR_2:
   \   000058   3E41         POP.W   R14
   \   00005A   3F41         POP.W   R15
   \   00005C   3C41         POP.W   R12
   \   00005E   3D41         POP.W   R13
   \   000060   0013         RETI
   \   000062                REQUIRE SD24MEM0
   \   000062                REQUIRE SD24MEM1
   \   000062                REQUIRE P1OUT
   \   000062                REQUIRE TACCR2
   \   000062                REQUIRE SD24MEM2
   \   000062                REQUIRE TACCTL1
   \   000062                REQUIRE SD24IV
     70          
     71          #pragma vector=TIMER0_A1_VECTOR

   \                                 In  segment CODE, align 2
     72          __interrupt void SyncAnalogSampling (void)
   \                     SyncAnalogSampling:
     73          {  
     74          
     75            switch (TAIV)
   \   000000   A2922E01     CMP.W   #0x4, &0x12e
   \   000004   0220         JNE     ??SyncAnalogSampling_0
     76            {
     77            case 4:                       // TACCR2
     78               // P1OUT |= BIT6;
     79               SD24CCTL2 |=SD24SC;    //Triger sampling of Control Pilot
   \   000006   A2D30601     BIS.W   #0x2, &0x106
     80              break;
     81                    
     82            }
     83          }
   \                     ??SyncAnalogSampling_0:
   \   00000A   0013         RETI
   \   00000C                REQUIRE SD24CCTL2
   \   00000C                REQUIRE TAIV

   \                                 In  segment INTVEC, offset 0xa, root
   \                     `??SyncAnalogSampling::??INTVEC 10`:
   \   00000A   ....         DC16    SyncAnalogSampling

   \                                 In  segment INTVEC, offset 0x18, root
   \                     `??SD24AISR::??INTVEC 24`:
   \   000018   ....         DC16    SD24AISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   SD24AISR
       12   -> Charger_States
       12   -> CheckPilot
       12   -> calculatePower
      4   SyncAnalogSampling


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  P1OUT
      98  SD24AISR
       2  SD24AISR::??INTVEC 24
       2  SD24CCTL2
       2  SD24IV
       2  SD24MEM0
       2  SD24MEM1
       2  SD24MEM2
      12  SyncAnalogSampling
       2  SyncAnalogSampling::??INTVEC 10
       2  TACCR2
       2  TACCTL1
       2  TAIV

 
 110 bytes in segment CODE
  17 bytes in segment DATA16_AN
   4 bytes in segment INTVEC
 
 110 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
   0 bytes of DATA  memory (+ 17 bytes shared)

Errors: none
Warnings: none
